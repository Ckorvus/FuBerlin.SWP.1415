package geometry;


/**
 * Polygon Interface
 * 
 * Implementations of this interface will provide a constructor which is
 * parameterized with an array of Vertex. Edges will be generated by connecting
 * the vertices in the order given.
 * 
 * -> at least 3 different vertices needed to prevent 'IllegalPolygonException'
 * -> only simple polygons accepted
 * -> no nested polygons possible
 * 
 */

public interface Polygon {
	
	/**
	 * rotates the polygon about center by the given angle (degree)
	 * 
	 * @param angle angle by which the Polygon is rotated
	 * @param center center of the rotation
	 */
	void rotate (double angle, Vertex center);
	
	
	/**
	 * shifts the polygon by adding the x and y shift to all vertices
	 * 
	 * @param x x shift
	 * @param y y shift
	 */
	void translate (double x, double y);
	
	
	/**
	 * Proofs whether or not the polygon is convex
	 * 
	 * @return true if the polygon is convex 
	 */
	boolean isConvex();
	
	/**
	 * Creates the convex hull of a single polygon
	 * e.g. a.getConvexHull()
	 * 
	 * @return ConvexPolygon which represents the convex hull
	 */
	ConvexPolygon getConvexHull();
	
	/**
	 * Creates the convex hull of n+1 polygons
	 * e.g. a.getConvexHull([b,c,d])
	 * 
	 * @param polygons n additional polygons
	 * @return ConvexPolygon which represents the convex hull
	 */
	ConvexPolygon getConvexHull(Polygon[] polygons);
	
	/**
	 * Creates the bounding box of a single polygon
	 * e.g. a.getboundingBox()
	 * 
	 * @return Rectangle which represents the bounding box
	 */
	APRectangle getAPBoundingBox();
	
	/**
	 * Creates the bounding box of n+1 polygons
	 * e.g. a.getboundingBox([b,c,d])
	 * 
	 * @param polygons n additional polygons
	 * @return Rectangle which represents the bounding box
	 */
	APRectangle getAPBoundingBox(Polygon[] polygons);
	
	
	/**
	 * Proofs if two polygons are overlapping
	 * e.g. a.overlaps(b)
	 * 
	 * @param polygon the second polygon
	 * @return true if they are overlapping
	 */
	boolean overlaps(Polygon polygon);
	
	
	/**
	 * Returns the array of all vertices
	 * e.g. for graphical representation
	 * 
	 * @return Array of all vertices
	 */
	Vertex[] getVertices();
	
	/**
	 * converts Polygon to ConvexPolygon
	 * the polygon must fulfill isConvex() 
	 * to prevent 'IllegalPolygonException'
	 * 
	 * @return Array of all vertices
	 */
	ConvexPolygon toConvexPolygon() throws IllegalPolygonException;
	
}
